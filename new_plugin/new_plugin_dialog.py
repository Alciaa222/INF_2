# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NewPluginDialog
                                 A QGIS plugin
 Wtyczka oblicza różnicę wysokości oraz pole powierzchni między punktami
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Nikola Bobik Alicja Dymowska Andżelika Bańkowska
        email                : nikola.bobik2@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

          
import os
import qgis.utils
from qgis.core import QgsWkbTypes
from qgis.core import QgsMessageLog, Qgis
from qgis.utils import iface
import numpy as np
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QDialog, QApplication, QMessageBox
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
# from qgis.core import QgsProject, QgsPointXY, QgsFeature
from qgis.core import QgsWkbTypes, QgsMessageLog, QgsProject, QgsPointXY, QgsFeature, QgsVectorLayer
from qgis.core import QgsVectorLayer, QgsPoint, QgsGeometry


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'new_plugin_dialog_base.ui'))

class NewPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(NewPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # self.pushButton_oblicz.clicked.connect(self.wynik)
        self.pushButton_oblicz.clicked.connect(self.wysokosc)
        self.pushButton_oblicz_pole_metoda_gaussa.clicked.connect(self.oblicz_pole_metoda_gaussa)
        # self.label_wybierzwarstwe_text.clicked.connect(self.warstwa)
        # self.label_wybierzoperacje_text.clicked.connect(self.operacja)
    
    
    def wysokosc(self):  
        Layer = self.mMapLayerComboBox.currentLayer()
        count = Layer.featureCount()
        active = qgis.utils.iface.activeLayer()
        amount = active.selectedFeatureCount()
        WSPx = []
        WSPy = []
        WSPh = []
        NR = []
        for punkt in active.selectedFeatures():
            WSPx.append(punkt['x2000'])
            WSPy.append(punkt['y2000'])
            if str(punkt['h_plkron86nh']) == "NULL":
                WSPh.append(punkt['h_plevrf2007nh'])
            else:                
                WSPh.append(punkt['h_plkron86nh'])
            NR.append(punkt['nr_punktu'])
            
        if amount !=2 :
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText('Proszę zaznaczyć 2 punkty, gdy chcesz otrzymać różnicę wysokości')
            msg.setInformativeText('Nieprawidłowa ilość danych')
            msg.setWindowTitle("Nieprawidłowa ilość danych")
            msg.exec_()
            
        if amount == 2:
            dh = float(WSPh[1]) - float(WSPh[0])
            qgis.utils.iface.messageBar().pushMessage('Różnica wysokości punktów:'+str(NR) + ' jest równa: ' + str(round(dh, 3)) + ' [m]')
        WSPx = []
        WSPy = []
        WSPh = []
        NR = []
            
    def oblicz_pole_metoda_gaussa(self):
        active_layer = iface.activeLayer()  # Pobranie aktywnej warstwy
        features = active_layer.selectedFeatures()

        if not active_layer or not isinstance(active_layer, QgsVectorLayer):
            iface.messageBar().pushMessage('Błąd', 'Nie można znaleźć aktywnej warstwy', level=Qgis.Warning)
            return
    # Pobranie współrzędnych punktów
        punkty = []
        for feature in features:
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type() == QgsWkbTypes.PointGeometry:
                if geomSingleType:
                    x = geom.asPoint().x()
                    y = geom.asPoint().y()
                    #punkty.append((x,y))
                    point = geom.asPoint()
                    punkty.append(point)
                else:
                    QgsMessageLog.logMessage("Niepoprawna geometria")
            # if geom.type() == QgsGeometry.Point():
            #     point = geom.asPoint()
            #     punkty.append(point)

        if len(punkty) < 3:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText('Proszę zaznaczyć co najmniej 3 punkty, gdy chcesz otrzymać pole powierzchni')
            msg.setInformativeText('Nieprawidłowa ilość danych')
            msg.setWindowTitle("Nieprawidłowa ilość danych")
            msg.exec_()
            
            iface.messageBar().pushMessage('Błąd', 'Do obliczenia pola proszę wybrać co najmniej 3 punkty', level=Qgis.Warning)
            return

    # Obliczanie pola na podstawie metody Gaussa
        n = len(punkty)
        suma = 0.0
        for i in range(n):
            j = (i + 1) % n
            suma += punkty[i].x() * punkty[j].y() - punkty[j].x() * punkty[i].y()

        pole = abs(suma) / 2

        iface.messageBar().pushMessage('Informacja', f'Pole figury: {pole} [m2]' )
        iface.messageBar().pushMessage('Informacja', f'Wykorzystane punkty: {len(punkty)}')
# Przykład użycia

            
    
     
    
        

    
    
    


       

    
